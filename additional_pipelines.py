from nipype.interfaces.base import BaseInterface
from nipype.interfaces.base import BaseInterfaceInputSpec
from nipype.interfaces.base import File
from nipype.interfaces.base import traits
from nipype.interfaces.base import TraitedSpec

# ======================================================================
# T1 preprocessing & FreeSurfer reconstruction

class T1PreprocInputSpec(BaseInterfaceInputSpec):
    subject_id = traits.String(desc='subject ID')
    T1 = File(exist=True, desc='T1-weighted anatomical image')
    template_directory = File(
        exist=True, desc='directory where template files are stored')
    out_directory = File(
        exist=True, desc='directory where FreeSurfer output should be directed')


class T1PreprocOutputSpec(TraitedSpec):
    brainmask = File(exist=True, desc='brain mask generated by FreeSurfer')
    subjects_dir = File(exist=True, desc='FreeSufer subject directory')
    subject_id = traits.String(desc='subject ID')
    T1 = File(exist=True, desc='T1 file used by FreeSurfer')
    wm = File(
        exist=True, desc='segmented white matter volume generated by FreeSufer')


class T1Preproc(BaseInterface):
    input_spec = T1PreprocInputSpec
    output_spec = T1PreprocOutputSpec

    def _run_interface(self, runtime):
        from additional_interfaces import DipyDenoiseT1
        from additional_interfaces import FSRename
        from additional_interfaces import FS_Gyrification
        from nipype.interfaces.ants import N4BiasFieldCorrection
        from nipype.interfaces.ants.segmentation import BrainExtraction
        from nipype.interfaces.freesurfer import MRIConvert
        from nipype.interfaces.freesurfer import ReconAll
        import nipype.interfaces.fsl as fsl
        import nipype.pipeline.engine as pe
        import os

        subject_id = self.inputs.subject_id
        T1 = self.inputs.T1
        template_directory = self.inputs.template_directory
        out_directory = self.inputs.out_directory

        if not os.path.isdir(out_directory + '/FreeSurfer/'):
            os.mkdir(out_directory + '/FreeSurfer/')

        # Getting a better field of view
        robustfov = pe.Node(interface=fsl.RobustFOV(), name='robustfov')
        robustfov.inputs.in_file = T1

        # Denoising
        T1_denoise = pe.Node(interface=DipyDenoiseT1(), name='T1_denoise')

        # Bias field correction
        n4 = pe.Node(interface=N4BiasFieldCorrection(), name='n4')
        n4.inputs.dimension = 3
        n4.inputs.save_bias = True

        # Brain extraction
        brainextraction = pe.Node(
            interface=BrainExtraction(), name='brainextraction')
        brainextraction.inputs.dimension = 3
        brainextraction.inputs.brain_template = template_directory + '/T_template.nii.gz'
        brainextraction.inputs.brain_probability_mask = template_directory + \
            '/T_template_BrainCerebellumProbabilityMask.nii.gz'

        # Renaming files for FreeSurfer
        rename = pe.Node(FSRename(), name='rename')

        # Running FreeSurfer
        autorecon1 = pe.Node(interface=ReconAll(), name='autorecon1')
        autorecon1.inputs.subject_id = subject_id
        autorecon1.inputs.directive = 'autorecon1'
        autorecon1.inputs.args = '-noskullstrip'
        autorecon1.inputs.subjects_dir = out_directory + '/FreeSurfer/'

        autorecon2 = pe.Node(interface=ReconAll(), name='autorecon2')
        autorecon2.inputs.directive = 'autorecon2'

        autorecon3 = pe.Node(interface=ReconAll(), name='autorecon3')
        autorecon3.inputs.directive = 'autorecon3'

        T1_convert = pe.Node(interface=MRIConvert(), name='T1_convert')
        T1_convert.inputs.out_type = 'niigz'

        mask_convert = pe.Node(interface=MRIConvert(), name='mask_convert')
        mask_convert.inputs.out_type = 'niigz'

        # Connecting the pipeline
        T1_preprocessing = pe.Workflow(name='T1_preprocessing')

        T1_preprocessing.connect(robustfov, 'out_roi', T1_denoise, 'in_file')
        T1_preprocessing.connect(T1_denoise, 'out_file', n4, 'input_image')
        T1_preprocessing.connect(
            n4, 'output_image', brainextraction, 'anatomical_image')
        T1_preprocessing.connect(
            brainextraction, 'BrainExtractionBrain', autorecon1, 'T1_files')
        T1_preprocessing.connect(
            autorecon1, 'subject_id', autorecon2, 'subject_id')
        T1_preprocessing.connect(
            autorecon1, 'subjects_dir', autorecon2, 'subjects_dir')
        T1_preprocessing.connect(
            autorecon1, 'subject_id', rename, 'subject_id')
        T1_preprocessing.connect(
            autorecon1, 'subjects_dir', rename, 'subjects_dir')
        T1_preprocessing.connect(
            autorecon2, 'subject_id', autorecon3, 'subject_id')
        T1_preprocessing.connect(
            autorecon2, 'subjects_dir', autorecon3, 'subjects_dir')
        T1_preprocessing.connect(autorecon3, 'brain', T1_convert, 'in_file')


        # ==============================================================
        # Running the workflow
        T1_preprocessing.base_dir = os.path.abspath(self.inputs.out_directory)
        T1_preprocessing.run()

        return runtime

    def _list_outputs(self):
        import os
        outputs = self._outputs().get()
        directory = self.inputs.out_directory + '/FreeSurfer/' + self.inputs.subject_id

        outputs["brainmask"] = os.path.abspath(
            directory + '/mri/' + 'brainmask.nii.gz')
        outputs["subjects_dir"] = os.path.abspath(
            self.inputs.out_directory + '/FreeSurfer/')
        outputs["brain"] = os.path.abspath(directory + '/mri/' + 'brain.nii.gz')
        return outputs
